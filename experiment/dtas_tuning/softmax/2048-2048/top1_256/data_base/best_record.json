[
    {
        "softmax_<n: Range(1, 256)>_<m: Range(1, 256)>": {
            "latency(ms)": 0.012785958762985763,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1, 256)>_<m: Range(257, 512)>": {
            "latency(ms)": 0.017431012343935116,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1, 256)>_<m: Range(513, 768)>": {
            "latency(ms)": 0.02697623529769137,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1, 256)>_<m: Range(769, 1024)>": {
            "latency(ms)": 0.03637075698398835,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1, 256)>_<m: Range(1025, 1280)>": {
            "latency(ms)": 0.043602441150738205,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1, 256)>_<m: Range(1281, 1536)>": {
            "latency(ms)": 0.050329795228837584,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1, 256)>_<m: Range(1537, 1792)>": {
            "latency(ms)": 0.06580957235317943,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1, 256)>_<m: Range(1793, 2048)>": {
            "latency(ms)": 0.07142456637724817,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(257, 512)>_<m: Range(1, 256)>": {
            "latency(ms)": 0.033314706634063364,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(257, 512)>_<m: Range(257, 512)>": {
            "latency(ms)": 0.048872112294182216,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(257, 512)>_<m: Range(513, 768)>": {
            "latency(ms)": 0.07077509888806524,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(257, 512)>_<m: Range(769, 1024)>": {
            "latency(ms)": 0.09821355524324324,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(257, 512)>_<m: Range(1025, 1280)>": {
            "latency(ms)": 0.11646641750663131,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(257, 512)>_<m: Range(1281, 1536)>": {
            "latency(ms)": 0.13292488026533997,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(257, 512)>_<m: Range(1537, 1792)>": {
            "latency(ms)": 0.17548890449591284,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(257, 512)>_<m: Range(1793, 2048)>": {
            "latency(ms)": 0.19146593006430868,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(513, 768)>_<m: Range(1, 256)>": {
            "latency(ms)": 0.05302539610240734,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(513, 768)>_<m: Range(257, 512)>": {
            "latency(ms)": 0.07902592679558011,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(513, 768)>_<m: Range(513, 768)>": {
            "latency(ms)": 0.1112920372764787,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(513, 768)>_<m: Range(769, 1024)>": {
            "latency(ms)": 0.15875822259332023,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(513, 768)>_<m: Range(1025, 1280)>": {
            "latency(ms)": 0.18560277673267325,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(513, 768)>_<m: Range(1281, 1536)>": {
            "latency(ms)": 0.21464791962616822,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(513, 768)>_<m: Range(1537, 1792)>": {
            "latency(ms)": 0.28535553122362867,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(513, 768)>_<m: Range(1793, 2048)>": {
            "latency(ms)": 0.3053680615,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(769, 1024)>_<m: Range(1, 256)>": {
            "latency(ms)": 0.0714526708150745,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(769, 1024)>_<m: Range(257, 512)>": {
            "latency(ms)": 0.10603825945072701,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(769, 1024)>_<m: Range(513, 768)>": {
            "latency(ms)": 0.1529087476861167,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(769, 1024)>_<m: Range(769, 1024)>": {
            "latency(ms)": 0.21920416771428575,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(769, 1024)>_<m: Range(1025, 1280)>": {
            "latency(ms)": 0.2555505410909091,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(769, 1024)>_<m: Range(1281, 1536)>": {
            "latency(ms)": 0.29674678356164386,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(769, 1024)>_<m: Range(1537, 1792)>": {
            "latency(ms)": 0.3938911240310078,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(769, 1024)>_<m: Range(1793, 2048)>": {
            "latency(ms)": 0.4255532619266055,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1025, 1280)>_<m: Range(1, 256)>": {
            "latency(ms)": 0.09064267155963303,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1025, 1280)>_<m: Range(257, 512)>": {
            "latency(ms)": 0.13476903050847458,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1025, 1280)>_<m: Range(513, 768)>": {
            "latency(ms)": 0.19506279525065967,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1025, 1280)>_<m: Range(769, 1024)>": {
            "latency(ms)": 0.2799071363295881,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1025, 1280)>_<m: Range(1025, 1280)>": {
            "latency(ms)": 0.32789855528846157,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1025, 1280)>_<m: Range(1281, 1536)>": {
            "latency(ms)": 0.37855922168674694,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1025, 1280)>_<m: Range(1537, 1792)>": {
            "latency(ms)": 0.5044171512820512,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1025, 1280)>_<m: Range(1793, 2048)>": {
            "latency(ms)": 0.5344926278787879,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1281, 1536)>_<m: Range(1, 256)>": {
            "latency(ms)": 0.11064173385714286,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1281, 1536)>_<m: Range(257, 512)>": {
            "latency(ms)": 0.1643151595800525,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1281, 1536)>_<m: Range(513, 768)>": {
            "latency(ms)": 0.23622910261437907,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1281, 1536)>_<m: Range(769, 1024)>": {
            "latency(ms)": 0.34080663379629633,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1281, 1536)>_<m: Range(1025, 1280)>": {
            "latency(ms)": 0.39783314226190475,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1281, 1536)>_<m: Range(1281, 1536)>": {
            "latency(ms)": 0.4605089165413534,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1281, 1536)>_<m: Range(1537, 1792)>": {
            "latency(ms)": 0.6194543564102566,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1281, 1536)>_<m: Range(1793, 2048)>": {
            "latency(ms)": 0.6479855742672181,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1537, 1792)>_<m: Range(1, 256)>": {
            "latency(ms)": 0.12984765666104553,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1537, 1792)>_<m: Range(257, 512)>": {
            "latency(ms)": 0.19316395329153607,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1537, 1792)>_<m: Range(513, 768)>": {
            "latency(ms)": 0.278619986328125,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1537, 1792)>_<m: Range(769, 1024)>": {
            "latency(ms)": 0.4010091447513813,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1537, 1792)>_<m: Range(1025, 1280)>": {
            "latency(ms)": 0.46788820071428566,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1537, 1792)>_<m: Range(1281, 1536)>": {
            "latency(ms)": 0.5419876526785715,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1537, 1792)>_<m: Range(1537, 1792)>": {
            "latency(ms)": 0.7310679854961831,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1537, 1792)>_<m: Range(1793, 2048)>": {
            "latency(ms)": 0.7623217528397962,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1793, 2048)>_<m: Range(1, 256)>": {
            "latency(ms)": 0.15233137819444445,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1793, 2048)>_<m: Range(257, 512)>": {
            "latency(ms)": 0.22246770942028987,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1793, 2048)>_<m: Range(513, 768)>": {
            "latency(ms)": 0.3204072672727273,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1793, 2048)>_<m: Range(769, 1024)>": {
            "latency(ms)": 0.4609588474358974,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1793, 2048)>_<m: Range(1025, 1280)>": {
            "latency(ms)": 0.539627682644628,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1793, 2048)>_<m: Range(1281, 1536)>": {
            "latency(ms)": 0.62453751875,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1793, 2048)>_<m: Range(1537, 1792)>": {
            "latency(ms)": 0.8268506942857142,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1793, 2048)>_<m: Range(1793, 2048)>": {
            "latency(ms)": 0.8781360442105264,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    }
]