[
    {
        "cast_<n: Range(1, 128)>": {
            "latency(ms)": 0.002252061901215523,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 160,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(160), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(327679)) // T.int64(327680), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(327679)) // T.int64(327680) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(327679)) // T.int64(327680) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(327679)) // T.int64(327680)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(129, 256)>": {
            "latency(ms)": 0.003388191356055773,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 320,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(320), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(655359)) // T.int64(655360), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(655359)) // T.int64(655360) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(655359)) // T.int64(655360) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(655359)) // T.int64(655360)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(257, 384)>": {
            "latency(ms)": 0.005106642260102672,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 480,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(480), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(983039)) // T.int64(983040), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(983039)) // T.int64(983040) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(983039)) // T.int64(983040) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(983039)) // T.int64(983040)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(385, 512)>": {
            "latency(ms)": 0.008374934458133879,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 640,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(640), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(1310719)) // T.int64(1310720), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(1310719)) // T.int64(1310720) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(1310719)) // T.int64(1310720) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(1310719)) // T.int64(1310720)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(513, 640)>": {
            "latency(ms)": 0.012502932961385993,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 800,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(800), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(1638399)) // T.int64(1638400), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(1638399)) // T.int64(1638400) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(1638399)) // T.int64(1638400) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(1638399)) // T.int64(1638400)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(641, 768)>": {
            "latency(ms)": 0.014720975503235081,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 960,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(960), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(1966079)) // T.int64(1966080), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(1966079)) // T.int64(1966080) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(1966079)) // T.int64(1966080) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(1966079)) // T.int64(1966080)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(769, 896)>": {
            "latency(ms)": 0.017201392899159666,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 1120,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(1120), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(2293759)) // T.int64(2293760), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(2293759)) // T.int64(2293760) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(2293759)) // T.int64(2293760) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(2293759)) // T.int64(2293760)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(897, 1024)>": {
            "latency(ms)": 0.019626593528432074,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 1280,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(1280), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(2621439)) // T.int64(2621440), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(2621439)) // T.int64(2621440) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(2621439)) // T.int64(2621440) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(2621439)) // T.int64(2621440)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(1025, 1152)>": {
            "latency(ms)": 0.021958228195588625,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 1440,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(1440), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(2949119)) // T.int64(2949120), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(2949119)) // T.int64(2949120) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(2949119)) // T.int64(2949120) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(2949119)) // T.int64(2949120)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(1153, 1280)>": {
            "latency(ms)": 0.024279113979442,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 1600,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(1600), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(3276799)) // T.int64(3276800), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(3276799)) // T.int64(3276800) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(3276799)) // T.int64(3276800) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(3276799)) // T.int64(3276800)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(1281, 1408)>": {
            "latency(ms)": 0.02670069289617486,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 1760,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(1760), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(3604479)) // T.int64(3604480), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(3604479)) // T.int64(3604480) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(3604479)) // T.int64(3604480) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(3604479)) // T.int64(3604480)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(1409, 1536)>": {
            "latency(ms)": 0.028994154732364406,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 1920,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(1920), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(3932159)) // T.int64(3932160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(3932159)) // T.int64(3932160) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(3932159)) // T.int64(3932160) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(3932159)) // T.int64(3932160)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(1537, 1664)>": {
            "latency(ms)": 0.03130010854214123,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 2080,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(2080), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(4259839)) // T.int64(4259840), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(4259839)) // T.int64(4259840) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(4259839)) // T.int64(4259840) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(4259839)) // T.int64(4259840)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(1665, 1792)>": {
            "latency(ms)": 0.03366516486264863,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 2240,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(2240), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(4587519)) // T.int64(4587520), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(4587519)) // T.int64(4587520) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(4587519)) // T.int64(4587520) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(4587519)) // T.int64(4587520)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(1793, 1920)>": {
            "latency(ms)": 0.03598539198405669,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 2400,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(2400), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(4915199)) // T.int64(4915200), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(4915199)) // T.int64(4915200) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(4915199)) // T.int64(4915200) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(4915199)) // T.int64(4915200)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(1921, 2048)>": {
            "latency(ms)": 0.038208389555035124,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 2560,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(2560), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(5242879)) // T.int64(5242880), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(5242879)) // T.int64(5242880) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(5242879)) // T.int64(5242880) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(5242879)) // T.int64(5242880)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(2049, 2176)>": {
            "latency(ms)": 0.04064548521825397,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 2720,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(2720), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(5570559)) // T.int64(5570560), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(5570559)) // T.int64(5570560) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(5570559)) // T.int64(5570560) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(5570559)) // T.int64(5570560)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(2177, 2304)>": {
            "latency(ms)": 0.043001559298061806,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 2880,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(2880), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(5898239)) // T.int64(5898240), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(5898239)) // T.int64(5898240) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(5898239)) // T.int64(5898240) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(5898239)) // T.int64(5898240)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(2305, 2432)>": {
            "latency(ms)": 0.045334276824512534,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 3040,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(3040), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(6225919)) // T.int64(6225920), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(6225919)) // T.int64(6225920) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(6225919)) // T.int64(6225920) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(6225919)) // T.int64(6225920)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(2433, 2560)>": {
            "latency(ms)": 0.04773216845168801,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 3200,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(3200), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(6553599)) // T.int64(6553600), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(6553599)) // T.int64(6553600) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(6553599)) // T.int64(6553600) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(6553599)) // T.int64(6553600)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(2561, 2688)>": {
            "latency(ms)": 0.05001380459558823,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 3360,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(3360), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(6881279)) // T.int64(6881280), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(6881279)) // T.int64(6881280) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(6881279)) // T.int64(6881280) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(6881279)) // T.int64(6881280)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(2689, 2816)>": {
            "latency(ms)": 0.052375099293059134,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 3520,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(3520), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(7208959)) // T.int64(7208960), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(7208959)) // T.int64(7208960) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(7208959)) // T.int64(7208960) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(7208959)) // T.int64(7208960)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(2817, 2944)>": {
            "latency(ms)": 0.054646225319865314,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 3680,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(3680), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(7536639)) // T.int64(7536640), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(7536639)) // T.int64(7536640) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(7536639)) // T.int64(7536640) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(7536639)) // T.int64(7536640)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(2945, 3072)>": {
            "latency(ms)": 0.05703564375441074,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 3840,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(3840), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(7864319)) // T.int64(7864320), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(7864319)) // T.int64(7864320) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(7864319)) // T.int64(7864320) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(7864319)) // T.int64(7864320)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(3073, 3200)>": {
            "latency(ms)": 0.059300911264534885,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 4000,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(4000), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(8191999)) // T.int64(8192000), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(8191999)) // T.int64(8192000) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(8191999)) // T.int64(8192000) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(8191999)) // T.int64(8192000)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(3201, 3328)>": {
            "latency(ms)": 0.061652755064737254,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 4160,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(4160), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(8519679)) // T.int64(8519680), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(8519679)) // T.int64(8519680) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(8519679)) // T.int64(8519680) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(8519679)) // T.int64(8519680)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(3329, 3456)>": {
            "latency(ms)": 0.06399595521327013,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 4320,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(4320), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(8847359)) // T.int64(8847360), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(8847359)) // T.int64(8847360) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(8847359)) // T.int64(8847360) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(8847359)) // T.int64(8847360)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(3457, 3584)>": {
            "latency(ms)": 0.06635788695652176,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 4480,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(4480), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(9175039)) // T.int64(9175040), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(9175039)) // T.int64(9175040) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(9175039)) // T.int64(9175040) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(9175039)) // T.int64(9175040)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(3585, 3712)>": {
            "latency(ms)": 0.06860531480541456,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 4640,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(4640), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(9502719)) // T.int64(9502720), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(9502719)) // T.int64(9502720) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(9502719)) // T.int64(9502720) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(9502719)) // T.int64(9502720)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(3713, 3840)>": {
            "latency(ms)": 0.07092412979094076,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 4800,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(4800), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(9830399)) // T.int64(9830400), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(9830399)) // T.int64(9830400) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(9830399)) // T.int64(9830400) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(9830399)) // T.int64(9830400)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(3841, 3968)>": {
            "latency(ms)": 0.07329797561196735,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 4960,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(4960), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(10158079)) // T.int64(10158080), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(10158079)) // T.int64(10158080) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(10158079)) // T.int64(10158080) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(10158079)) // T.int64(10158080)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    },
    {
        "cast_<n: Range(3969, 4096)>": {
            "latency(ms)": 0.07551072971216341,
            "config": [
                {
                    "len_tx": 256,
                    "vector_size": 8,
                    "grid_size": 5120,
                    "unroll_depth": 256
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(var_A: T.handle, var_compute: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        A = T.match_buffer(var_A, (T.int64(1), n, T.int64(2560)), \"float16\")\n        compute = T.match_buffer(var_compute, (T.int64(1), n, T.int64(2560)))\n        # with T.block(\"root\"):\n        for ax0_ax1_fused_0 in T.thread_binding(T.int64(5120), thread=\"blockIdx.x\"):\n            for ax0_ax1_fused_1 in T.serial((n * T.int64(2560) + T.int64(10485759)) // T.int64(10485760), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                for ax0_ax1_fused_2 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax0_ax1_fused_3 in T.vectorized(T.int64(8)):\n                        with T.block(\"compute\"):\n                            v0 = T.axis.spatial(n, (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(10485759)) // T.int64(10485760) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) // T.int64(2560))\n                            v1 = T.axis.spatial(T.int64(2560), (ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(10485759)) // T.int64(10485760) * T.int64(2048)) + ax0_ax1_fused_1 * T.int64(2048) + ax0_ax1_fused_2 * T.int64(8) + ax0_ax1_fused_3) % T.int64(2560))\n                            T.where(((ax0_ax1_fused_0 * ((n * T.int64(2560) + T.int64(10485759)) // T.int64(10485760)) + ax0_ax1_fused_1) * T.int64(256) + ax0_ax1_fused_2) * T.int64(8) + ax0_ax1_fused_3 < n * T.int64(2560))\n                            T.reads(A[T.int64(0), v0, v1])\n                            T.writes(compute[T.int64(0), v0, v1])\n                            compute[T.int64(0), v0, v1] = T.Cast(\"float32\", A[T.int64(0), v0, v1])"
        }
    }
]