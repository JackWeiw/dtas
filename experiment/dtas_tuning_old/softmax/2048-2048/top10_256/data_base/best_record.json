[
    {
        "softmax_<n: Range(1, 256)>_<m: Range(1, 256)>": {
            "latency(ms)": 0.012783571545380212,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1, 256)>_<m: Range(257, 512)>": {
            "latency(ms)": 0.018251790510135885,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1, 256)>_<m: Range(513, 768)>": {
            "latency(ms)": 0.02782489190410376,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1, 256)>_<m: Range(769, 1024)>": {
            "latency(ms)": 0.03586604010206251,
            "config": [
                {
                    "len_tx": 256,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(255)) // T.int64(256), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(256) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(256) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(255)) // T.int64(256), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(256) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(256) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(256), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(255)) // T.int64(256), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(256) + ax2_1)\n                        T.where(ax2_0 * T.int64(256) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1, 256)>_<m: Range(1025, 1280)>": {
            "latency(ms)": 0.04487326433938191,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1, 256)>_<m: Range(1281, 1536)>": {
            "latency(ms)": 0.05081002274974496,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1, 256)>_<m: Range(1537, 1792)>": {
            "latency(ms)": 0.06157756467079965,
            "config": [
                {
                    "len_tx": 160,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(159)) // T.int64(160) * T.int64(160) + T.int64(639)) // T.int64(640)):\n                for ax3_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(640) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(159)) // T.int64(160) * T.int64(160))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(160) + ax2_1)\n                        T.where(ax2_0 * T.int64(160) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1, 256)>_<m: Range(1793, 2048)>": {
            "latency(ms)": 0.068392020714481,
            "config": [
                {
                    "len_tx": 160,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(159)) // T.int64(160) * T.int64(160) + T.int64(639)) // T.int64(640)):\n                for ax3_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(640) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(159)) // T.int64(160) * T.int64(160))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(160) + ax2_1)\n                        T.where(ax2_0 * T.int64(160) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(257, 512)>_<m: Range(1, 256)>": {
            "latency(ms)": 0.03395422546660117,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(257, 512)>_<m: Range(257, 512)>": {
            "latency(ms)": 0.04998871334422658,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(257, 512)>_<m: Range(513, 768)>": {
            "latency(ms)": 0.07222555949109415,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(257, 512)>_<m: Range(769, 1024)>": {
            "latency(ms)": 0.09742436257545271,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(257, 512)>_<m: Range(1025, 1280)>": {
            "latency(ms)": 0.11984098877551022,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(257, 512)>_<m: Range(1281, 1536)>": {
            "latency(ms)": 0.13537695,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(257, 512)>_<m: Range(1537, 1792)>": {
            "latency(ms)": 0.16473465185185185,
            "config": [
                {
                    "len_tx": 160,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(159)) // T.int64(160) * T.int64(160) + T.int64(639)) // T.int64(640)):\n                for ax3_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(640) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(159)) // T.int64(160) * T.int64(160))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(160) + ax2_1)\n                        T.where(ax2_0 * T.int64(160) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(257, 512)>_<m: Range(1793, 2048)>": {
            "latency(ms)": 0.18441889985754983,
            "config": [
                {
                    "len_tx": 160,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(159)) // T.int64(160) * T.int64(160) + T.int64(639)) // T.int64(640)):\n                for ax3_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(640) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(159)) // T.int64(160) * T.int64(160))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(160) + ax2_1)\n                        T.where(ax2_0 * T.int64(160) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(513, 768)>_<m: Range(1, 256)>": {
            "latency(ms)": 0.0539726392688172,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(513, 768)>_<m: Range(257, 512)>": {
            "latency(ms)": 0.08005900515695066,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(513, 768)>_<m: Range(513, 768)>": {
            "latency(ms)": 0.1153781578488372,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(513, 768)>_<m: Range(769, 1024)>": {
            "latency(ms)": 0.16046432860040566,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(513, 768)>_<m: Range(1025, 1280)>": {
            "latency(ms)": 0.19265773288409707,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(513, 768)>_<m: Range(1281, 1536)>": {
            "latency(ms)": 0.21854303937500003,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(513, 768)>_<m: Range(1537, 1792)>": {
            "latency(ms)": 0.27248878482490274,
            "config": [
                {
                    "len_tx": 160,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(159)) // T.int64(160) * T.int64(160) + T.int64(639)) // T.int64(640)):\n                for ax3_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(640) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(159)) // T.int64(160) * T.int64(160))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(160) + ax2_1)\n                        T.where(ax2_0 * T.int64(160) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(513, 768)>_<m: Range(1793, 2048)>": {
            "latency(ms)": 0.3027916980099502,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(769, 1024)>_<m: Range(1, 256)>": {
            "latency(ms)": 0.07419831713925647,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(769, 1024)>_<m: Range(257, 512)>": {
            "latency(ms)": 0.11034603175675675,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(769, 1024)>_<m: Range(513, 768)>": {
            "latency(ms)": 0.16001911929460583,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(769, 1024)>_<m: Range(769, 1024)>": {
            "latency(ms)": 0.21681318162650604,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(769, 1024)>_<m: Range(1025, 1280)>": {
            "latency(ms)": 0.25940228509090907,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(769, 1024)>_<m: Range(1281, 1536)>": {
            "latency(ms)": 0.30640307220543805,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(769, 1024)>_<m: Range(1537, 1792)>": {
            "latency(ms)": 0.378097041011236,
            "config": [
                {
                    "len_tx": 160,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(159)) // T.int64(160) * T.int64(160) + T.int64(639)) // T.int64(640)):\n                for ax3_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(640) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(159)) // T.int64(160) * T.int64(160))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(160) + ax2_1)\n                        T.where(ax2_0 * T.int64(160) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(769, 1024)>_<m: Range(1793, 2048)>": {
            "latency(ms)": 0.4148674773584906,
            "config": [
                {
                    "len_tx": 160,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(159)) // T.int64(160) * T.int64(160) + T.int64(639)) // T.int64(640)):\n                for ax3_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(640) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(159)) // T.int64(160) * T.int64(160))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(160) + ax2_1)\n                        T.where(ax2_0 * T.int64(160) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1025, 1280)>_<m: Range(1, 256)>": {
            "latency(ms)": 0.09440872852689011,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1025, 1280)>_<m: Range(257, 512)>": {
            "latency(ms)": 0.14237464669509592,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1025, 1280)>_<m: Range(513, 768)>": {
            "latency(ms)": 0.20222191385869567,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1025, 1280)>_<m: Range(769, 1024)>": {
            "latency(ms)": 0.27227845708812265,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1025, 1280)>_<m: Range(1025, 1280)>": {
            "latency(ms)": 0.34221876831683173,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1025, 1280)>_<m: Range(1281, 1536)>": {
            "latency(ms)": 0.3856827515923567,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1025, 1280)>_<m: Range(1537, 1792)>": {
            "latency(ms)": 0.48128847142857145,
            "config": [
                {
                    "len_tx": 160,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(159)) // T.int64(160) * T.int64(160) + T.int64(639)) // T.int64(640)):\n                for ax3_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(640) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(159)) // T.int64(160) * T.int64(160))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(160) + ax2_1)\n                        T.where(ax2_0 * T.int64(160) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1025, 1280)>_<m: Range(1793, 2048)>": {
            "latency(ms)": 0.5323912533333333,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1281, 1536)>_<m: Range(1, 256)>": {
            "latency(ms)": 0.11390083877338877,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1281, 1536)>_<m: Range(257, 512)>": {
            "latency(ms)": 0.17132357379182156,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1281, 1536)>_<m: Range(513, 768)>": {
            "latency(ms)": 0.2462431419243986,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1281, 1536)>_<m: Range(769, 1024)>": {
            "latency(ms)": 0.3382447651960784,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1281, 1536)>_<m: Range(1025, 1280)>": {
            "latency(ms)": 0.3991673845238095,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1281, 1536)>_<m: Range(1281, 1536)>": {
            "latency(ms)": 0.46847636142131976,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1281, 1536)>_<m: Range(1537, 1792)>": {
            "latency(ms)": 0.587015598019802,
            "config": [
                {
                    "len_tx": 160,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(159)) // T.int64(160) * T.int64(160) + T.int64(639)) // T.int64(640)):\n                for ax3_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(640) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(159)) // T.int64(160) * T.int64(160))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(160) + ax2_1)\n                        T.where(ax2_0 * T.int64(160) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1281, 1536)>_<m: Range(1793, 2048)>": {
            "latency(ms)": 0.6384489031578948,
            "config": [
                {
                    "len_tx": 160,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(159)) // T.int64(160) * T.int64(160) + T.int64(639)) // T.int64(640)):\n                for ax3_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(640) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(159)) // T.int64(160) * T.int64(160))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(160) + ax2_1)\n                        T.where(ax2_0 * T.int64(160) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1537, 1792)>_<m: Range(1, 256)>": {
            "latency(ms)": 0.13383510114795918,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1537, 1792)>_<m: Range(257, 512)>": {
            "latency(ms)": 0.2013800483333333,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1537, 1792)>_<m: Range(513, 768)>": {
            "latency(ms)": 0.29238491507936504,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1537, 1792)>_<m: Range(769, 1024)>": {
            "latency(ms)": 0.4051099625730994,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1537, 1792)>_<m: Range(1025, 1280)>": {
            "latency(ms)": 0.4839733496124031,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1537, 1792)>_<m: Range(1281, 1536)>": {
            "latency(ms)": 0.5607817053571428,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1537, 1792)>_<m: Range(1537, 1792)>": {
            "latency(ms)": 0.695322572519084,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1537, 1792)>_<m: Range(1793, 2048)>": {
            "latency(ms)": 0.7583276197530864,
            "config": [
                {
                    "len_tx": 160,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(159)) // T.int64(160) * T.int64(160) + T.int64(639)) // T.int64(640)):\n                for ax3_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(640) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(159)) // T.int64(160) * T.int64(160))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(160) + ax2_1)\n                        T.where(ax2_0 * T.int64(160) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1793, 2048)>_<m: Range(1, 256)>": {
            "latency(ms)": 0.1538896387275242,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1793, 2048)>_<m: Range(257, 512)>": {
            "latency(ms)": 0.230610397265625,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1793, 2048)>_<m: Range(513, 768)>": {
            "latency(ms)": 0.33306239375,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1793, 2048)>_<m: Range(769, 1024)>": {
            "latency(ms)": 0.47041271456953637,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "cache"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1793, 2048)>_<m: Range(1025, 1280)>": {
            "latency(ms)": 0.554872710909091,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1793, 2048)>_<m: Range(1281, 1536)>": {
            "latency(ms)": 0.6253141239583333,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(127)) // T.int64(128) * T.int64(128) + T.int64(511)) // T.int64(512)):\n                for ax3_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(512) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(128) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(127)) // T.int64(128) * T.int64(128))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(128) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(128) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(127)) // T.int64(128), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(128) + ax2_1)\n                        T.where(ax2_0 * T.int64(128) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1793, 2048)>_<m: Range(1537, 1792)>": {
            "latency(ms)": 0.7948392846153847,
            "config": [
                {
                    "len_tx": 160,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(159)) // T.int64(160) * T.int64(160) + T.int64(639)) // T.int64(640)):\n                for ax3_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(640) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(159)) // T.int64(160) * T.int64(160))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(160) + ax2_1)\n                        T.where(ax2_0 * T.int64(160) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    },
    {
        "softmax_<n: Range(1793, 2048)>_<m: Range(1793, 2048)>": {
            "latency(ms)": 0.8754206462686567,
            "config": [
                {
                    "len_tx": 160,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv38: T.handle, p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n, m = T.int64(), T.int64()\n        lv38 = T.match_buffer(p_lv38, (T.int64(1), T.int64(32), n, m))\n        var_compute_intermediate = T.match_buffer(p_output0, (T.int64(1), T.int64(32), n, m), \"float16\")\n        # with T.block(\"root\"):\n        T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        T_softmax_expsum_shared = T.alloc_buffer((T.int64(1), T.int64(32), n), scope=\"shared\")\n        lv38_shared_dyn = T.alloc_buffer((T.int64(1), T.int64(32), n, m), scope=\"shared.dyn\")\n        for ax0_ax1_fused in T.thread_binding(n * T.int64(32), thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2, ax3_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), ((m + T.int64(159)) // T.int64(160) * T.int64(160) + T.int64(639)) // T.int64(640)):\n                for ax3_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax3_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv38_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax1)\n                            v2 = T.axis.spatial(n, ax0_ax1_fused % n + ax2)\n                            v3 = T.axis.spatial(m, ax3_0 * T.int64(640) + ax3_1 * T.int64(4) + ax3_2)\n                            T.where((ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < m and (ax3_0 * T.int64(160) + ax3_1) * T.int64(4) + ax3_2 < (m + T.int64(159)) // T.int64(160) * T.int64(160))\n                            T.reads(lv38[v0, v1, v2, v3])\n                            T.writes(lv38_shared_dyn[v0, v1, v2, v3])\n                            lv38_shared_dyn[v0, v1, v2, v3] = lv38[v0, v1, v2, v3]\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_maxelem\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2])\n                            T.writes(T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.float32(-3.4028234663852886e+38)\n                            T_softmax_maxelem_shared[T.int64(0), v0, v1] = T.max(T_softmax_maxelem_shared[T.int64(0), v0, v1], lv38_shared_dyn[T.int64(0), v0, v1, v2])\n            for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):\n                for ax2_fused_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                    for ax2_fused_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"T_softmax_expsum\"):\n                            v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n + ax0)\n                            v1 = T.axis.spatial(n, ax0_ax1_fused % n + ax1)\n                            v2 = T.axis.reduce(m, ax2_fused_0 * T.int64(160) + ax2_fused_1)\n                            T.where(ax2_fused_0 * T.int64(160) + ax2_fused_1 < m)\n                            T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1])\n                            T.writes(T_softmax_expsum_shared[T.int64(0), v0, v1])\n                            with T.init():\n                                T_softmax_expsum_shared[T.int64(0), v0, v1] = T.float32(0)\n                            T_softmax_expsum_shared[T.int64(0), v0, v1] = T_softmax_expsum_shared[T.int64(0), v0, v1] + T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1])\n            for ax2_1 in T.thread_binding(T.int64(160), thread=\"threadIdx.x\"):\n                for ax2_0 in T.serial((m + T.int64(159)) // T.int64(160), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(T.int64(32), ax0_ax1_fused // n)\n                        v1 = T.axis.spatial(n, ax0_ax1_fused % n)\n                        v2 = T.axis.spatial(m, ax2_0 * T.int64(160) + ax2_1)\n                        T.where(ax2_0 * T.int64(160) + ax2_1 < m)\n                        T.reads(lv38_shared_dyn[T.int64(0), v0, v1, v2], T_softmax_maxelem_shared[T.int64(0), v0, v1], T_softmax_expsum_shared[T.int64(0), v0, v1])\n                        T.writes(var_compute_intermediate[T.int64(0), v0, v1, v2])\n                        var_compute_intermediate[T.int64(0), v0, v1, v2] = T.Cast(\"float16\", T.exp(lv38_shared_dyn[T.int64(0), v0, v1, v2] - T_softmax_maxelem_shared[T.int64(0), v0, v1]) / T_softmax_expsum_shared[T.int64(0), v0, v1])"
        }
    }
]