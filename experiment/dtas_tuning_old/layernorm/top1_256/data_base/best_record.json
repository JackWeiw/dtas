[
    {
        "fused_layer_norm_cast1_<n: Range(1, 256)>": {
            "latency(ms)": 0.004185692947549615,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv6: T.handle, param_1: T.Buffer((T.int64(2560),), \"float32\"), param_2: T.Buffer((T.int64(2560),), \"float32\"), p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        lv6 = T.match_buffer(p_lv6, (T.int64(1), n, T.int64(2560)))\n        compute_intermediate = T.match_buffer(p_output0, (T.int64(1), n, T.int64(2560)), \"float16\")\n        # with T.block(\"root\"):\n        A_red_temp_v0_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        A_red_temp_v1_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        lv6_shared_dyn = T.alloc_buffer((T.int64(1), n, T.int64(2560)), scope=\"shared.dyn\")\n        for ax0_fused in T.thread_binding(n, thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2_0 in T.grid(T.int64(1), T.int64(1), T.int64(5)):\n                for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv6_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(n, ax0_fused + ax1)\n                            v2 = T.axis.spatial(T.int64(2560), ax2_0 * T.int64(512) + ax2_1 * T.int64(4) + ax2_2)\n                            T.reads(lv6[v0, v1, v2])\n                            T.writes(lv6_shared_dyn[v0, v1, v2])\n                            lv6_shared_dyn[v0, v1, v2] = lv6[v0, v1, v2]\n            for ax0 in range(T.int64(1)):\n                for ax1_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax1_fused_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"A_red_temp\"):\n                            v0 = T.axis.spatial(n, ax0_fused + ax0)\n                            v1 = T.axis.reduce(T.int64(2560), ax1_fused_0 * T.int64(128) + ax1_fused_1)\n                            T.reads(lv6_shared_dyn[T.int64(0), v0, v1])\n                            T.writes(A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0])\n                            with T.init():\n                                A_red_temp_v0_shared[T.int64(0), v0] = T.float32(0)\n                                A_red_temp_v1_shared[T.int64(0), v0] = T.float32(0)\n                            v_A_red_temp_v0: T.float32 = A_red_temp_v0_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1]\n                            v_A_red_temp_v1: T.float32 = A_red_temp_v1_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1] * lv6_shared_dyn[T.int64(0), v0, v1]\n                            A_red_temp_v0_shared[T.int64(0), v0] = v_A_red_temp_v0\n                            A_red_temp_v1_shared[T.int64(0), v0] = v_A_red_temp_v1\n            for ax1_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax1_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(n, ax0_fused)\n                        v1 = T.axis.spatial(T.int64(2560), ax1_0 * T.int64(128) + ax1_1)\n                        T.reads(lv6_shared_dyn[T.int64(0), v0, v1], A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0], param_1[v1], param_2[v1])\n                        T.writes(compute_intermediate[T.int64(0), v0, v1])\n                        compute_intermediate[T.int64(0), v0, v1] = T.Cast(\"float16\", (lv6_shared_dyn[T.int64(0), v0, v1] - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) * T.rsqrt(A_red_temp_v1_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) * (A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) + T.float32(1.0000000000000001e-05)) * param_1[v1] + param_2[v1])"
        }
    },
    {
        "fused_layer_norm_cast1_<n: Range(257, 512)>": {
            "latency(ms)": 0.00778347504588503,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv6: T.handle, param_1: T.Buffer((T.int64(2560),), \"float32\"), param_2: T.Buffer((T.int64(2560),), \"float32\"), p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        lv6 = T.match_buffer(p_lv6, (T.int64(1), n, T.int64(2560)))\n        compute_intermediate = T.match_buffer(p_output0, (T.int64(1), n, T.int64(2560)), \"float16\")\n        # with T.block(\"root\"):\n        A_red_temp_v0_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        A_red_temp_v1_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        lv6_shared_dyn = T.alloc_buffer((T.int64(1), n, T.int64(2560)), scope=\"shared.dyn\")\n        for ax0_fused in T.thread_binding(n, thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2_0 in T.grid(T.int64(1), T.int64(1), T.int64(5)):\n                for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv6_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(n, ax0_fused + ax1)\n                            v2 = T.axis.spatial(T.int64(2560), ax2_0 * T.int64(512) + ax2_1 * T.int64(4) + ax2_2)\n                            T.reads(lv6[v0, v1, v2])\n                            T.writes(lv6_shared_dyn[v0, v1, v2])\n                            lv6_shared_dyn[v0, v1, v2] = lv6[v0, v1, v2]\n            for ax0 in range(T.int64(1)):\n                for ax1_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax1_fused_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"A_red_temp\"):\n                            v0 = T.axis.spatial(n, ax0_fused + ax0)\n                            v1 = T.axis.reduce(T.int64(2560), ax1_fused_0 * T.int64(128) + ax1_fused_1)\n                            T.reads(lv6_shared_dyn[T.int64(0), v0, v1])\n                            T.writes(A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0])\n                            with T.init():\n                                A_red_temp_v0_shared[T.int64(0), v0] = T.float32(0)\n                                A_red_temp_v1_shared[T.int64(0), v0] = T.float32(0)\n                            v_A_red_temp_v0: T.float32 = A_red_temp_v0_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1]\n                            v_A_red_temp_v1: T.float32 = A_red_temp_v1_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1] * lv6_shared_dyn[T.int64(0), v0, v1]\n                            A_red_temp_v0_shared[T.int64(0), v0] = v_A_red_temp_v0\n                            A_red_temp_v1_shared[T.int64(0), v0] = v_A_red_temp_v1\n            for ax1_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax1_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(n, ax0_fused)\n                        v1 = T.axis.spatial(T.int64(2560), ax1_0 * T.int64(128) + ax1_1)\n                        T.reads(lv6_shared_dyn[T.int64(0), v0, v1], A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0], param_1[v1], param_2[v1])\n                        T.writes(compute_intermediate[T.int64(0), v0, v1])\n                        compute_intermediate[T.int64(0), v0, v1] = T.Cast(\"float16\", (lv6_shared_dyn[T.int64(0), v0, v1] - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) * T.rsqrt(A_red_temp_v1_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) * (A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) + T.float32(1.0000000000000001e-05)) * param_1[v1] + param_2[v1])"
        }
    },
    {
        "fused_layer_norm_cast1_<n: Range(513, 768)>": {
            "latency(ms)": 0.015339651828598335,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv6: T.handle, param_1: T.Buffer((T.int64(2560),), \"float32\"), param_2: T.Buffer((T.int64(2560),), \"float32\"), p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        lv6 = T.match_buffer(p_lv6, (T.int64(1), n, T.int64(2560)))\n        compute_intermediate = T.match_buffer(p_output0, (T.int64(1), n, T.int64(2560)), \"float16\")\n        # with T.block(\"root\"):\n        A_red_temp_v0_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        A_red_temp_v1_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        lv6_shared_dyn = T.alloc_buffer((T.int64(1), n, T.int64(2560)), scope=\"shared.dyn\")\n        for ax0_fused in T.thread_binding(n, thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2_0 in T.grid(T.int64(1), T.int64(1), T.int64(5)):\n                for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv6_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(n, ax0_fused + ax1)\n                            v2 = T.axis.spatial(T.int64(2560), ax2_0 * T.int64(512) + ax2_1 * T.int64(4) + ax2_2)\n                            T.reads(lv6[v0, v1, v2])\n                            T.writes(lv6_shared_dyn[v0, v1, v2])\n                            lv6_shared_dyn[v0, v1, v2] = lv6[v0, v1, v2]\n            for ax0 in range(T.int64(1)):\n                for ax1_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax1_fused_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"A_red_temp\"):\n                            v0 = T.axis.spatial(n, ax0_fused + ax0)\n                            v1 = T.axis.reduce(T.int64(2560), ax1_fused_0 * T.int64(128) + ax1_fused_1)\n                            T.reads(lv6_shared_dyn[T.int64(0), v0, v1])\n                            T.writes(A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0])\n                            with T.init():\n                                A_red_temp_v0_shared[T.int64(0), v0] = T.float32(0)\n                                A_red_temp_v1_shared[T.int64(0), v0] = T.float32(0)\n                            v_A_red_temp_v0: T.float32 = A_red_temp_v0_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1]\n                            v_A_red_temp_v1: T.float32 = A_red_temp_v1_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1] * lv6_shared_dyn[T.int64(0), v0, v1]\n                            A_red_temp_v0_shared[T.int64(0), v0] = v_A_red_temp_v0\n                            A_red_temp_v1_shared[T.int64(0), v0] = v_A_red_temp_v1\n            for ax1_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax1_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(n, ax0_fused)\n                        v1 = T.axis.spatial(T.int64(2560), ax1_0 * T.int64(128) + ax1_1)\n                        T.reads(lv6_shared_dyn[T.int64(0), v0, v1], A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0], param_1[v1], param_2[v1])\n                        T.writes(compute_intermediate[T.int64(0), v0, v1])\n                        compute_intermediate[T.int64(0), v0, v1] = T.Cast(\"float16\", (lv6_shared_dyn[T.int64(0), v0, v1] - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) * T.rsqrt(A_red_temp_v1_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) * (A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) + T.float32(1.0000000000000001e-05)) * param_1[v1] + param_2[v1])"
        }
    },
    {
        "fused_layer_norm_cast1_<n: Range(769, 1024)>": {
            "latency(ms)": 0.020762352221462752,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv6: T.handle, param_1: T.Buffer((T.int64(2560),), \"float32\"), param_2: T.Buffer((T.int64(2560),), \"float32\"), p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        lv6 = T.match_buffer(p_lv6, (T.int64(1), n, T.int64(2560)))\n        compute_intermediate = T.match_buffer(p_output0, (T.int64(1), n, T.int64(2560)), \"float16\")\n        # with T.block(\"root\"):\n        A_red_temp_v0_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        A_red_temp_v1_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        lv6_shared_dyn = T.alloc_buffer((T.int64(1), n, T.int64(2560)), scope=\"shared.dyn\")\n        for ax0_fused in T.thread_binding(n, thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2_0 in T.grid(T.int64(1), T.int64(1), T.int64(5)):\n                for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv6_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(n, ax0_fused + ax1)\n                            v2 = T.axis.spatial(T.int64(2560), ax2_0 * T.int64(512) + ax2_1 * T.int64(4) + ax2_2)\n                            T.reads(lv6[v0, v1, v2])\n                            T.writes(lv6_shared_dyn[v0, v1, v2])\n                            lv6_shared_dyn[v0, v1, v2] = lv6[v0, v1, v2]\n            for ax0 in range(T.int64(1)):\n                for ax1_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax1_fused_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"A_red_temp\"):\n                            v0 = T.axis.spatial(n, ax0_fused + ax0)\n                            v1 = T.axis.reduce(T.int64(2560), ax1_fused_0 * T.int64(128) + ax1_fused_1)\n                            T.reads(lv6_shared_dyn[T.int64(0), v0, v1])\n                            T.writes(A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0])\n                            with T.init():\n                                A_red_temp_v0_shared[T.int64(0), v0] = T.float32(0)\n                                A_red_temp_v1_shared[T.int64(0), v0] = T.float32(0)\n                            v_A_red_temp_v0: T.float32 = A_red_temp_v0_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1]\n                            v_A_red_temp_v1: T.float32 = A_red_temp_v1_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1] * lv6_shared_dyn[T.int64(0), v0, v1]\n                            A_red_temp_v0_shared[T.int64(0), v0] = v_A_red_temp_v0\n                            A_red_temp_v1_shared[T.int64(0), v0] = v_A_red_temp_v1\n            for ax1_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax1_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(n, ax0_fused)\n                        v1 = T.axis.spatial(T.int64(2560), ax1_0 * T.int64(128) + ax1_1)\n                        T.reads(lv6_shared_dyn[T.int64(0), v0, v1], A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0], param_1[v1], param_2[v1])\n                        T.writes(compute_intermediate[T.int64(0), v0, v1])\n                        compute_intermediate[T.int64(0), v0, v1] = T.Cast(\"float16\", (lv6_shared_dyn[T.int64(0), v0, v1] - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) * T.rsqrt(A_red_temp_v1_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) * (A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) + T.float32(1.0000000000000001e-05)) * param_1[v1] + param_2[v1])"
        }
    },
    {
        "fused_layer_norm_cast1_<n: Range(1025, 1280)>": {
            "latency(ms)": 0.02563893339948965,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv6: T.handle, param_1: T.Buffer((T.int64(2560),), \"float32\"), param_2: T.Buffer((T.int64(2560),), \"float32\"), p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        lv6 = T.match_buffer(p_lv6, (T.int64(1), n, T.int64(2560)))\n        compute_intermediate = T.match_buffer(p_output0, (T.int64(1), n, T.int64(2560)), \"float16\")\n        # with T.block(\"root\"):\n        A_red_temp_v0_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        A_red_temp_v1_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        lv6_shared_dyn = T.alloc_buffer((T.int64(1), n, T.int64(2560)), scope=\"shared.dyn\")\n        for ax0_fused in T.thread_binding(n, thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2_0 in T.grid(T.int64(1), T.int64(1), T.int64(5)):\n                for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv6_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(n, ax0_fused + ax1)\n                            v2 = T.axis.spatial(T.int64(2560), ax2_0 * T.int64(512) + ax2_1 * T.int64(4) + ax2_2)\n                            T.reads(lv6[v0, v1, v2])\n                            T.writes(lv6_shared_dyn[v0, v1, v2])\n                            lv6_shared_dyn[v0, v1, v2] = lv6[v0, v1, v2]\n            for ax0 in range(T.int64(1)):\n                for ax1_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax1_fused_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"A_red_temp\"):\n                            v0 = T.axis.spatial(n, ax0_fused + ax0)\n                            v1 = T.axis.reduce(T.int64(2560), ax1_fused_0 * T.int64(128) + ax1_fused_1)\n                            T.reads(lv6_shared_dyn[T.int64(0), v0, v1])\n                            T.writes(A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0])\n                            with T.init():\n                                A_red_temp_v0_shared[T.int64(0), v0] = T.float32(0)\n                                A_red_temp_v1_shared[T.int64(0), v0] = T.float32(0)\n                            v_A_red_temp_v0: T.float32 = A_red_temp_v0_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1]\n                            v_A_red_temp_v1: T.float32 = A_red_temp_v1_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1] * lv6_shared_dyn[T.int64(0), v0, v1]\n                            A_red_temp_v0_shared[T.int64(0), v0] = v_A_red_temp_v0\n                            A_red_temp_v1_shared[T.int64(0), v0] = v_A_red_temp_v1\n            for ax1_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax1_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(n, ax0_fused)\n                        v1 = T.axis.spatial(T.int64(2560), ax1_0 * T.int64(128) + ax1_1)\n                        T.reads(lv6_shared_dyn[T.int64(0), v0, v1], A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0], param_1[v1], param_2[v1])\n                        T.writes(compute_intermediate[T.int64(0), v0, v1])\n                        compute_intermediate[T.int64(0), v0, v1] = T.Cast(\"float16\", (lv6_shared_dyn[T.int64(0), v0, v1] - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) * T.rsqrt(A_red_temp_v1_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) * (A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) + T.float32(1.0000000000000001e-05)) * param_1[v1] + param_2[v1])"
        }
    },
    {
        "fused_layer_norm_cast1_<n: Range(1281, 1536)>": {
            "latency(ms)": 0.029826625793518212,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv6: T.handle, param_1: T.Buffer((T.int64(2560),), \"float32\"), param_2: T.Buffer((T.int64(2560),), \"float32\"), p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        lv6 = T.match_buffer(p_lv6, (T.int64(1), n, T.int64(2560)))\n        compute_intermediate = T.match_buffer(p_output0, (T.int64(1), n, T.int64(2560)), \"float16\")\n        # with T.block(\"root\"):\n        A_red_temp_v0_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        A_red_temp_v1_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        lv6_shared_dyn = T.alloc_buffer((T.int64(1), n, T.int64(2560)), scope=\"shared.dyn\")\n        for ax0_fused in T.thread_binding(n, thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2_0 in T.grid(T.int64(1), T.int64(1), T.int64(5)):\n                for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv6_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(n, ax0_fused + ax1)\n                            v2 = T.axis.spatial(T.int64(2560), ax2_0 * T.int64(512) + ax2_1 * T.int64(4) + ax2_2)\n                            T.reads(lv6[v0, v1, v2])\n                            T.writes(lv6_shared_dyn[v0, v1, v2])\n                            lv6_shared_dyn[v0, v1, v2] = lv6[v0, v1, v2]\n            for ax0 in range(T.int64(1)):\n                for ax1_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax1_fused_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"A_red_temp\"):\n                            v0 = T.axis.spatial(n, ax0_fused + ax0)\n                            v1 = T.axis.reduce(T.int64(2560), ax1_fused_0 * T.int64(128) + ax1_fused_1)\n                            T.reads(lv6_shared_dyn[T.int64(0), v0, v1])\n                            T.writes(A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0])\n                            with T.init():\n                                A_red_temp_v0_shared[T.int64(0), v0] = T.float32(0)\n                                A_red_temp_v1_shared[T.int64(0), v0] = T.float32(0)\n                            v_A_red_temp_v0: T.float32 = A_red_temp_v0_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1]\n                            v_A_red_temp_v1: T.float32 = A_red_temp_v1_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1] * lv6_shared_dyn[T.int64(0), v0, v1]\n                            A_red_temp_v0_shared[T.int64(0), v0] = v_A_red_temp_v0\n                            A_red_temp_v1_shared[T.int64(0), v0] = v_A_red_temp_v1\n            for ax1_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax1_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(n, ax0_fused)\n                        v1 = T.axis.spatial(T.int64(2560), ax1_0 * T.int64(128) + ax1_1)\n                        T.reads(lv6_shared_dyn[T.int64(0), v0, v1], A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0], param_1[v1], param_2[v1])\n                        T.writes(compute_intermediate[T.int64(0), v0, v1])\n                        compute_intermediate[T.int64(0), v0, v1] = T.Cast(\"float16\", (lv6_shared_dyn[T.int64(0), v0, v1] - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) * T.rsqrt(A_red_temp_v1_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) * (A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) + T.float32(1.0000000000000001e-05)) * param_1[v1] + param_2[v1])"
        }
    },
    {
        "fused_layer_norm_cast1_<n: Range(1537, 1792)>": {
            "latency(ms)": 0.03411810461538462,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv6: T.handle, param_1: T.Buffer((T.int64(2560),), \"float32\"), param_2: T.Buffer((T.int64(2560),), \"float32\"), p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        lv6 = T.match_buffer(p_lv6, (T.int64(1), n, T.int64(2560)))\n        compute_intermediate = T.match_buffer(p_output0, (T.int64(1), n, T.int64(2560)), \"float16\")\n        # with T.block(\"root\"):\n        A_red_temp_v0_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        A_red_temp_v1_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        lv6_shared_dyn = T.alloc_buffer((T.int64(1), n, T.int64(2560)), scope=\"shared.dyn\")\n        for ax0_fused in T.thread_binding(n, thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2_0 in T.grid(T.int64(1), T.int64(1), T.int64(5)):\n                for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv6_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(n, ax0_fused + ax1)\n                            v2 = T.axis.spatial(T.int64(2560), ax2_0 * T.int64(512) + ax2_1 * T.int64(4) + ax2_2)\n                            T.reads(lv6[v0, v1, v2])\n                            T.writes(lv6_shared_dyn[v0, v1, v2])\n                            lv6_shared_dyn[v0, v1, v2] = lv6[v0, v1, v2]\n            for ax0 in range(T.int64(1)):\n                for ax1_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax1_fused_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"A_red_temp\"):\n                            v0 = T.axis.spatial(n, ax0_fused + ax0)\n                            v1 = T.axis.reduce(T.int64(2560), ax1_fused_0 * T.int64(128) + ax1_fused_1)\n                            T.reads(lv6_shared_dyn[T.int64(0), v0, v1])\n                            T.writes(A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0])\n                            with T.init():\n                                A_red_temp_v0_shared[T.int64(0), v0] = T.float32(0)\n                                A_red_temp_v1_shared[T.int64(0), v0] = T.float32(0)\n                            v_A_red_temp_v0: T.float32 = A_red_temp_v0_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1]\n                            v_A_red_temp_v1: T.float32 = A_red_temp_v1_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1] * lv6_shared_dyn[T.int64(0), v0, v1]\n                            A_red_temp_v0_shared[T.int64(0), v0] = v_A_red_temp_v0\n                            A_red_temp_v1_shared[T.int64(0), v0] = v_A_red_temp_v1\n            for ax1_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax1_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(n, ax0_fused)\n                        v1 = T.axis.spatial(T.int64(2560), ax1_0 * T.int64(128) + ax1_1)\n                        T.reads(lv6_shared_dyn[T.int64(0), v0, v1], A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0], param_1[v1], param_2[v1])\n                        T.writes(compute_intermediate[T.int64(0), v0, v1])\n                        compute_intermediate[T.int64(0), v0, v1] = T.Cast(\"float16\", (lv6_shared_dyn[T.int64(0), v0, v1] - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) * T.rsqrt(A_red_temp_v1_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) * (A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) + T.float32(1.0000000000000001e-05)) * param_1[v1] + param_2[v1])"
        }
    },
    {
        "fused_layer_norm_cast1_<n: Range(1793, 2048)>": {
            "latency(ms)": 0.03869767643932684,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv6: T.handle, param_1: T.Buffer((T.int64(2560),), \"float32\"), param_2: T.Buffer((T.int64(2560),), \"float32\"), p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        lv6 = T.match_buffer(p_lv6, (T.int64(1), n, T.int64(2560)))\n        compute_intermediate = T.match_buffer(p_output0, (T.int64(1), n, T.int64(2560)), \"float16\")\n        # with T.block(\"root\"):\n        A_red_temp_v0_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        A_red_temp_v1_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        lv6_shared_dyn = T.alloc_buffer((T.int64(1), n, T.int64(2560)), scope=\"shared.dyn\")\n        for ax0_fused in T.thread_binding(n, thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2_0 in T.grid(T.int64(1), T.int64(1), T.int64(5)):\n                for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv6_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(n, ax0_fused + ax1)\n                            v2 = T.axis.spatial(T.int64(2560), ax2_0 * T.int64(512) + ax2_1 * T.int64(4) + ax2_2)\n                            T.reads(lv6[v0, v1, v2])\n                            T.writes(lv6_shared_dyn[v0, v1, v2])\n                            lv6_shared_dyn[v0, v1, v2] = lv6[v0, v1, v2]\n            for ax0 in range(T.int64(1)):\n                for ax1_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax1_fused_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"A_red_temp\"):\n                            v0 = T.axis.spatial(n, ax0_fused + ax0)\n                            v1 = T.axis.reduce(T.int64(2560), ax1_fused_0 * T.int64(128) + ax1_fused_1)\n                            T.reads(lv6_shared_dyn[T.int64(0), v0, v1])\n                            T.writes(A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0])\n                            with T.init():\n                                A_red_temp_v0_shared[T.int64(0), v0] = T.float32(0)\n                                A_red_temp_v1_shared[T.int64(0), v0] = T.float32(0)\n                            v_A_red_temp_v0: T.float32 = A_red_temp_v0_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1]\n                            v_A_red_temp_v1: T.float32 = A_red_temp_v1_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1] * lv6_shared_dyn[T.int64(0), v0, v1]\n                            A_red_temp_v0_shared[T.int64(0), v0] = v_A_red_temp_v0\n                            A_red_temp_v1_shared[T.int64(0), v0] = v_A_red_temp_v1\n            for ax1_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax1_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(n, ax0_fused)\n                        v1 = T.axis.spatial(T.int64(2560), ax1_0 * T.int64(128) + ax1_1)\n                        T.reads(lv6_shared_dyn[T.int64(0), v0, v1], A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0], param_1[v1], param_2[v1])\n                        T.writes(compute_intermediate[T.int64(0), v0, v1])\n                        compute_intermediate[T.int64(0), v0, v1] = T.Cast(\"float16\", (lv6_shared_dyn[T.int64(0), v0, v1] - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) * T.rsqrt(A_red_temp_v1_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) * (A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) + T.float32(1.0000000000000001e-05)) * param_1[v1] + param_2[v1])"
        }
    },
    {
        "fused_layer_norm_cast1_<n: Range(2049, 2304)>": {
            "latency(ms)": 0.04356596820436508,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv6: T.handle, param_1: T.Buffer((T.int64(2560),), \"float32\"), param_2: T.Buffer((T.int64(2560),), \"float32\"), p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        lv6 = T.match_buffer(p_lv6, (T.int64(1), n, T.int64(2560)))\n        compute_intermediate = T.match_buffer(p_output0, (T.int64(1), n, T.int64(2560)), \"float16\")\n        # with T.block(\"root\"):\n        A_red_temp_v0_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        A_red_temp_v1_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        lv6_shared_dyn = T.alloc_buffer((T.int64(1), n, T.int64(2560)), scope=\"shared.dyn\")\n        for ax0_fused in T.thread_binding(n, thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2_0 in T.grid(T.int64(1), T.int64(1), T.int64(5)):\n                for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv6_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(n, ax0_fused + ax1)\n                            v2 = T.axis.spatial(T.int64(2560), ax2_0 * T.int64(512) + ax2_1 * T.int64(4) + ax2_2)\n                            T.reads(lv6[v0, v1, v2])\n                            T.writes(lv6_shared_dyn[v0, v1, v2])\n                            lv6_shared_dyn[v0, v1, v2] = lv6[v0, v1, v2]\n            for ax0 in range(T.int64(1)):\n                for ax1_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax1_fused_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"A_red_temp\"):\n                            v0 = T.axis.spatial(n, ax0_fused + ax0)\n                            v1 = T.axis.reduce(T.int64(2560), ax1_fused_0 * T.int64(128) + ax1_fused_1)\n                            T.reads(lv6_shared_dyn[T.int64(0), v0, v1])\n                            T.writes(A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0])\n                            with T.init():\n                                A_red_temp_v0_shared[T.int64(0), v0] = T.float32(0)\n                                A_red_temp_v1_shared[T.int64(0), v0] = T.float32(0)\n                            v_A_red_temp_v0: T.float32 = A_red_temp_v0_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1]\n                            v_A_red_temp_v1: T.float32 = A_red_temp_v1_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1] * lv6_shared_dyn[T.int64(0), v0, v1]\n                            A_red_temp_v0_shared[T.int64(0), v0] = v_A_red_temp_v0\n                            A_red_temp_v1_shared[T.int64(0), v0] = v_A_red_temp_v1\n            for ax1_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax1_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(n, ax0_fused)\n                        v1 = T.axis.spatial(T.int64(2560), ax1_0 * T.int64(128) + ax1_1)\n                        T.reads(lv6_shared_dyn[T.int64(0), v0, v1], A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0], param_1[v1], param_2[v1])\n                        T.writes(compute_intermediate[T.int64(0), v0, v1])\n                        compute_intermediate[T.int64(0), v0, v1] = T.Cast(\"float16\", (lv6_shared_dyn[T.int64(0), v0, v1] - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) * T.rsqrt(A_red_temp_v1_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) * (A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) + T.float32(1.0000000000000001e-05)) * param_1[v1] + param_2[v1])"
        }
    },
    {
        "fused_layer_norm_cast1_<n: Range(2305, 2560)>": {
            "latency(ms)": 0.04847612529510962,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv6: T.handle, param_1: T.Buffer((T.int64(2560),), \"float32\"), param_2: T.Buffer((T.int64(2560),), \"float32\"), p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        lv6 = T.match_buffer(p_lv6, (T.int64(1), n, T.int64(2560)))\n        compute_intermediate = T.match_buffer(p_output0, (T.int64(1), n, T.int64(2560)), \"float16\")\n        # with T.block(\"root\"):\n        A_red_temp_v0_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        A_red_temp_v1_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        lv6_shared_dyn = T.alloc_buffer((T.int64(1), n, T.int64(2560)), scope=\"shared.dyn\")\n        for ax0_fused in T.thread_binding(n, thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2_0 in T.grid(T.int64(1), T.int64(1), T.int64(5)):\n                for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv6_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(n, ax0_fused + ax1)\n                            v2 = T.axis.spatial(T.int64(2560), ax2_0 * T.int64(512) + ax2_1 * T.int64(4) + ax2_2)\n                            T.reads(lv6[v0, v1, v2])\n                            T.writes(lv6_shared_dyn[v0, v1, v2])\n                            lv6_shared_dyn[v0, v1, v2] = lv6[v0, v1, v2]\n            for ax0 in range(T.int64(1)):\n                for ax1_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax1_fused_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"A_red_temp\"):\n                            v0 = T.axis.spatial(n, ax0_fused + ax0)\n                            v1 = T.axis.reduce(T.int64(2560), ax1_fused_0 * T.int64(128) + ax1_fused_1)\n                            T.reads(lv6_shared_dyn[T.int64(0), v0, v1])\n                            T.writes(A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0])\n                            with T.init():\n                                A_red_temp_v0_shared[T.int64(0), v0] = T.float32(0)\n                                A_red_temp_v1_shared[T.int64(0), v0] = T.float32(0)\n                            v_A_red_temp_v0: T.float32 = A_red_temp_v0_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1]\n                            v_A_red_temp_v1: T.float32 = A_red_temp_v1_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1] * lv6_shared_dyn[T.int64(0), v0, v1]\n                            A_red_temp_v0_shared[T.int64(0), v0] = v_A_red_temp_v0\n                            A_red_temp_v1_shared[T.int64(0), v0] = v_A_red_temp_v1\n            for ax1_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax1_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(n, ax0_fused)\n                        v1 = T.axis.spatial(T.int64(2560), ax1_0 * T.int64(128) + ax1_1)\n                        T.reads(lv6_shared_dyn[T.int64(0), v0, v1], A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0], param_1[v1], param_2[v1])\n                        T.writes(compute_intermediate[T.int64(0), v0, v1])\n                        compute_intermediate[T.int64(0), v0, v1] = T.Cast(\"float16\", (lv6_shared_dyn[T.int64(0), v0, v1] - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) * T.rsqrt(A_red_temp_v1_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) * (A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) + T.float32(1.0000000000000001e-05)) * param_1[v1] + param_2[v1])"
        }
    },
    {
        "fused_layer_norm_cast1_<n: Range(2561, 2816)>": {
            "latency(ms)": 0.052973632562500005,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv6: T.handle, param_1: T.Buffer((T.int64(2560),), \"float32\"), param_2: T.Buffer((T.int64(2560),), \"float32\"), p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        lv6 = T.match_buffer(p_lv6, (T.int64(1), n, T.int64(2560)))\n        compute_intermediate = T.match_buffer(p_output0, (T.int64(1), n, T.int64(2560)), \"float16\")\n        # with T.block(\"root\"):\n        A_red_temp_v0_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        A_red_temp_v1_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        lv6_shared_dyn = T.alloc_buffer((T.int64(1), n, T.int64(2560)), scope=\"shared.dyn\")\n        for ax0_fused in T.thread_binding(n, thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2_0 in T.grid(T.int64(1), T.int64(1), T.int64(5)):\n                for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv6_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(n, ax0_fused + ax1)\n                            v2 = T.axis.spatial(T.int64(2560), ax2_0 * T.int64(512) + ax2_1 * T.int64(4) + ax2_2)\n                            T.reads(lv6[v0, v1, v2])\n                            T.writes(lv6_shared_dyn[v0, v1, v2])\n                            lv6_shared_dyn[v0, v1, v2] = lv6[v0, v1, v2]\n            for ax0 in range(T.int64(1)):\n                for ax1_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax1_fused_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"A_red_temp\"):\n                            v0 = T.axis.spatial(n, ax0_fused + ax0)\n                            v1 = T.axis.reduce(T.int64(2560), ax1_fused_0 * T.int64(128) + ax1_fused_1)\n                            T.reads(lv6_shared_dyn[T.int64(0), v0, v1])\n                            T.writes(A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0])\n                            with T.init():\n                                A_red_temp_v0_shared[T.int64(0), v0] = T.float32(0)\n                                A_red_temp_v1_shared[T.int64(0), v0] = T.float32(0)\n                            v_A_red_temp_v0: T.float32 = A_red_temp_v0_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1]\n                            v_A_red_temp_v1: T.float32 = A_red_temp_v1_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1] * lv6_shared_dyn[T.int64(0), v0, v1]\n                            A_red_temp_v0_shared[T.int64(0), v0] = v_A_red_temp_v0\n                            A_red_temp_v1_shared[T.int64(0), v0] = v_A_red_temp_v1\n            for ax1_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax1_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(n, ax0_fused)\n                        v1 = T.axis.spatial(T.int64(2560), ax1_0 * T.int64(128) + ax1_1)\n                        T.reads(lv6_shared_dyn[T.int64(0), v0, v1], A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0], param_1[v1], param_2[v1])\n                        T.writes(compute_intermediate[T.int64(0), v0, v1])\n                        compute_intermediate[T.int64(0), v0, v1] = T.Cast(\"float16\", (lv6_shared_dyn[T.int64(0), v0, v1] - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) * T.rsqrt(A_red_temp_v1_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) * (A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) + T.float32(1.0000000000000001e-05)) * param_1[v1] + param_2[v1])"
        }
    },
    {
        "fused_layer_norm_cast1_<n: Range(2817, 3072)>": {
            "latency(ms)": 0.05778811427576601,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv6: T.handle, param_1: T.Buffer((T.int64(2560),), \"float32\"), param_2: T.Buffer((T.int64(2560),), \"float32\"), p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        lv6 = T.match_buffer(p_lv6, (T.int64(1), n, T.int64(2560)))\n        compute_intermediate = T.match_buffer(p_output0, (T.int64(1), n, T.int64(2560)), \"float16\")\n        # with T.block(\"root\"):\n        A_red_temp_v0_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        A_red_temp_v1_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        lv6_shared_dyn = T.alloc_buffer((T.int64(1), n, T.int64(2560)), scope=\"shared.dyn\")\n        for ax0_fused in T.thread_binding(n, thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2_0 in T.grid(T.int64(1), T.int64(1), T.int64(5)):\n                for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv6_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(n, ax0_fused + ax1)\n                            v2 = T.axis.spatial(T.int64(2560), ax2_0 * T.int64(512) + ax2_1 * T.int64(4) + ax2_2)\n                            T.reads(lv6[v0, v1, v2])\n                            T.writes(lv6_shared_dyn[v0, v1, v2])\n                            lv6_shared_dyn[v0, v1, v2] = lv6[v0, v1, v2]\n            for ax0 in range(T.int64(1)):\n                for ax1_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax1_fused_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"A_red_temp\"):\n                            v0 = T.axis.spatial(n, ax0_fused + ax0)\n                            v1 = T.axis.reduce(T.int64(2560), ax1_fused_0 * T.int64(128) + ax1_fused_1)\n                            T.reads(lv6_shared_dyn[T.int64(0), v0, v1])\n                            T.writes(A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0])\n                            with T.init():\n                                A_red_temp_v0_shared[T.int64(0), v0] = T.float32(0)\n                                A_red_temp_v1_shared[T.int64(0), v0] = T.float32(0)\n                            v_A_red_temp_v0: T.float32 = A_red_temp_v0_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1]\n                            v_A_red_temp_v1: T.float32 = A_red_temp_v1_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1] * lv6_shared_dyn[T.int64(0), v0, v1]\n                            A_red_temp_v0_shared[T.int64(0), v0] = v_A_red_temp_v0\n                            A_red_temp_v1_shared[T.int64(0), v0] = v_A_red_temp_v1\n            for ax1_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax1_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(n, ax0_fused)\n                        v1 = T.axis.spatial(T.int64(2560), ax1_0 * T.int64(128) + ax1_1)\n                        T.reads(lv6_shared_dyn[T.int64(0), v0, v1], A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0], param_1[v1], param_2[v1])\n                        T.writes(compute_intermediate[T.int64(0), v0, v1])\n                        compute_intermediate[T.int64(0), v0, v1] = T.Cast(\"float16\", (lv6_shared_dyn[T.int64(0), v0, v1] - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) * T.rsqrt(A_red_temp_v1_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) * (A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) + T.float32(1.0000000000000001e-05)) * param_1[v1] + param_2[v1])"
        }
    },
    {
        "fused_layer_norm_cast1_<n: Range(3073, 3328)>": {
            "latency(ms)": 0.06229751404032861,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv6: T.handle, param_1: T.Buffer((T.int64(2560),), \"float32\"), param_2: T.Buffer((T.int64(2560),), \"float32\"), p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        lv6 = T.match_buffer(p_lv6, (T.int64(1), n, T.int64(2560)))\n        compute_intermediate = T.match_buffer(p_output0, (T.int64(1), n, T.int64(2560)), \"float16\")\n        # with T.block(\"root\"):\n        A_red_temp_v0_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        A_red_temp_v1_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        lv6_shared_dyn = T.alloc_buffer((T.int64(1), n, T.int64(2560)), scope=\"shared.dyn\")\n        for ax0_fused in T.thread_binding(n, thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2_0 in T.grid(T.int64(1), T.int64(1), T.int64(5)):\n                for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv6_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(n, ax0_fused + ax1)\n                            v2 = T.axis.spatial(T.int64(2560), ax2_0 * T.int64(512) + ax2_1 * T.int64(4) + ax2_2)\n                            T.reads(lv6[v0, v1, v2])\n                            T.writes(lv6_shared_dyn[v0, v1, v2])\n                            lv6_shared_dyn[v0, v1, v2] = lv6[v0, v1, v2]\n            for ax0 in range(T.int64(1)):\n                for ax1_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax1_fused_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"A_red_temp\"):\n                            v0 = T.axis.spatial(n, ax0_fused + ax0)\n                            v1 = T.axis.reduce(T.int64(2560), ax1_fused_0 * T.int64(128) + ax1_fused_1)\n                            T.reads(lv6_shared_dyn[T.int64(0), v0, v1])\n                            T.writes(A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0])\n                            with T.init():\n                                A_red_temp_v0_shared[T.int64(0), v0] = T.float32(0)\n                                A_red_temp_v1_shared[T.int64(0), v0] = T.float32(0)\n                            v_A_red_temp_v0: T.float32 = A_red_temp_v0_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1]\n                            v_A_red_temp_v1: T.float32 = A_red_temp_v1_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1] * lv6_shared_dyn[T.int64(0), v0, v1]\n                            A_red_temp_v0_shared[T.int64(0), v0] = v_A_red_temp_v0\n                            A_red_temp_v1_shared[T.int64(0), v0] = v_A_red_temp_v1\n            for ax1_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax1_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(n, ax0_fused)\n                        v1 = T.axis.spatial(T.int64(2560), ax1_0 * T.int64(128) + ax1_1)\n                        T.reads(lv6_shared_dyn[T.int64(0), v0, v1], A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0], param_1[v1], param_2[v1])\n                        T.writes(compute_intermediate[T.int64(0), v0, v1])\n                        compute_intermediate[T.int64(0), v0, v1] = T.Cast(\"float16\", (lv6_shared_dyn[T.int64(0), v0, v1] - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) * T.rsqrt(A_red_temp_v1_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) * (A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) + T.float32(1.0000000000000001e-05)) * param_1[v1] + param_2[v1])"
        }
    },
    {
        "fused_layer_norm_cast1_<n: Range(3329, 3584)>": {
            "latency(ms)": 0.06693678942695722,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv6: T.handle, param_1: T.Buffer((T.int64(2560),), \"float32\"), param_2: T.Buffer((T.int64(2560),), \"float32\"), p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        lv6 = T.match_buffer(p_lv6, (T.int64(1), n, T.int64(2560)))\n        compute_intermediate = T.match_buffer(p_output0, (T.int64(1), n, T.int64(2560)), \"float16\")\n        # with T.block(\"root\"):\n        A_red_temp_v0_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        A_red_temp_v1_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        lv6_shared_dyn = T.alloc_buffer((T.int64(1), n, T.int64(2560)), scope=\"shared.dyn\")\n        for ax0_fused in T.thread_binding(n, thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2_0 in T.grid(T.int64(1), T.int64(1), T.int64(5)):\n                for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv6_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(n, ax0_fused + ax1)\n                            v2 = T.axis.spatial(T.int64(2560), ax2_0 * T.int64(512) + ax2_1 * T.int64(4) + ax2_2)\n                            T.reads(lv6[v0, v1, v2])\n                            T.writes(lv6_shared_dyn[v0, v1, v2])\n                            lv6_shared_dyn[v0, v1, v2] = lv6[v0, v1, v2]\n            for ax0 in range(T.int64(1)):\n                for ax1_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax1_fused_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"A_red_temp\"):\n                            v0 = T.axis.spatial(n, ax0_fused + ax0)\n                            v1 = T.axis.reduce(T.int64(2560), ax1_fused_0 * T.int64(128) + ax1_fused_1)\n                            T.reads(lv6_shared_dyn[T.int64(0), v0, v1])\n                            T.writes(A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0])\n                            with T.init():\n                                A_red_temp_v0_shared[T.int64(0), v0] = T.float32(0)\n                                A_red_temp_v1_shared[T.int64(0), v0] = T.float32(0)\n                            v_A_red_temp_v0: T.float32 = A_red_temp_v0_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1]\n                            v_A_red_temp_v1: T.float32 = A_red_temp_v1_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1] * lv6_shared_dyn[T.int64(0), v0, v1]\n                            A_red_temp_v0_shared[T.int64(0), v0] = v_A_red_temp_v0\n                            A_red_temp_v1_shared[T.int64(0), v0] = v_A_red_temp_v1\n            for ax1_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax1_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(n, ax0_fused)\n                        v1 = T.axis.spatial(T.int64(2560), ax1_0 * T.int64(128) + ax1_1)\n                        T.reads(lv6_shared_dyn[T.int64(0), v0, v1], A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0], param_1[v1], param_2[v1])\n                        T.writes(compute_intermediate[T.int64(0), v0, v1])\n                        compute_intermediate[T.int64(0), v0, v1] = T.Cast(\"float16\", (lv6_shared_dyn[T.int64(0), v0, v1] - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) * T.rsqrt(A_red_temp_v1_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) * (A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) + T.float32(1.0000000000000001e-05)) * param_1[v1] + param_2[v1])"
        }
    },
    {
        "fused_layer_norm_cast1_<n: Range(3585, 3840)>": {
            "latency(ms)": 0.07166436620926245,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv6: T.handle, param_1: T.Buffer((T.int64(2560),), \"float32\"), param_2: T.Buffer((T.int64(2560),), \"float32\"), p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        lv6 = T.match_buffer(p_lv6, (T.int64(1), n, T.int64(2560)))\n        compute_intermediate = T.match_buffer(p_output0, (T.int64(1), n, T.int64(2560)), \"float16\")\n        # with T.block(\"root\"):\n        A_red_temp_v0_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        A_red_temp_v1_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        lv6_shared_dyn = T.alloc_buffer((T.int64(1), n, T.int64(2560)), scope=\"shared.dyn\")\n        for ax0_fused in T.thread_binding(n, thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2_0 in T.grid(T.int64(1), T.int64(1), T.int64(5)):\n                for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv6_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(n, ax0_fused + ax1)\n                            v2 = T.axis.spatial(T.int64(2560), ax2_0 * T.int64(512) + ax2_1 * T.int64(4) + ax2_2)\n                            T.reads(lv6[v0, v1, v2])\n                            T.writes(lv6_shared_dyn[v0, v1, v2])\n                            lv6_shared_dyn[v0, v1, v2] = lv6[v0, v1, v2]\n            for ax0 in range(T.int64(1)):\n                for ax1_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax1_fused_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"A_red_temp\"):\n                            v0 = T.axis.spatial(n, ax0_fused + ax0)\n                            v1 = T.axis.reduce(T.int64(2560), ax1_fused_0 * T.int64(128) + ax1_fused_1)\n                            T.reads(lv6_shared_dyn[T.int64(0), v0, v1])\n                            T.writes(A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0])\n                            with T.init():\n                                A_red_temp_v0_shared[T.int64(0), v0] = T.float32(0)\n                                A_red_temp_v1_shared[T.int64(0), v0] = T.float32(0)\n                            v_A_red_temp_v0: T.float32 = A_red_temp_v0_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1]\n                            v_A_red_temp_v1: T.float32 = A_red_temp_v1_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1] * lv6_shared_dyn[T.int64(0), v0, v1]\n                            A_red_temp_v0_shared[T.int64(0), v0] = v_A_red_temp_v0\n                            A_red_temp_v1_shared[T.int64(0), v0] = v_A_red_temp_v1\n            for ax1_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax1_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(n, ax0_fused)\n                        v1 = T.axis.spatial(T.int64(2560), ax1_0 * T.int64(128) + ax1_1)\n                        T.reads(lv6_shared_dyn[T.int64(0), v0, v1], A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0], param_1[v1], param_2[v1])\n                        T.writes(compute_intermediate[T.int64(0), v0, v1])\n                        compute_intermediate[T.int64(0), v0, v1] = T.Cast(\"float16\", (lv6_shared_dyn[T.int64(0), v0, v1] - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) * T.rsqrt(A_red_temp_v1_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) * (A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) + T.float32(1.0000000000000001e-05)) * param_1[v1] + param_2[v1])"
        }
    },
    {
        "fused_layer_norm_cast1_<n: Range(3841, 4096)>": {
            "latency(ms)": 0.07616881501831503,
            "config": [
                {
                    "len_tx": 128,
                    "unroll_depth": 256,
                    "vector_size": 4,
                    "temp_storage": "shared.dyn"
                }
            ],
            "mod": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func(private=True)\n    def main(p_lv6: T.handle, param_1: T.Buffer((T.int64(2560),), \"float32\"), param_2: T.Buffer((T.int64(2560),), \"float32\"), p_output0: T.handle):\n        T.func_attr({\"tir.noalias\": T.bool(True)})\n        n = T.int64()\n        lv6 = T.match_buffer(p_lv6, (T.int64(1), n, T.int64(2560)))\n        compute_intermediate = T.match_buffer(p_output0, (T.int64(1), n, T.int64(2560)), \"float16\")\n        # with T.block(\"root\"):\n        A_red_temp_v0_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        A_red_temp_v1_shared = T.alloc_buffer((T.int64(1), n), scope=\"shared\")\n        lv6_shared_dyn = T.alloc_buffer((T.int64(1), n, T.int64(2560)), scope=\"shared.dyn\")\n        for ax0_fused in T.thread_binding(n, thread=\"blockIdx.x\"):\n            for ax0, ax1, ax2_0 in T.grid(T.int64(1), T.int64(1), T.int64(5)):\n                for ax2_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax2_2 in T.vectorized(T.int64(4)):\n                        with T.block(\"lv6_shared.dyn\"):\n                            v0 = T.axis.spatial(T.int64(1), ax0)\n                            v1 = T.axis.spatial(n, ax0_fused + ax1)\n                            v2 = T.axis.spatial(T.int64(2560), ax2_0 * T.int64(512) + ax2_1 * T.int64(4) + ax2_2)\n                            T.reads(lv6[v0, v1, v2])\n                            T.writes(lv6_shared_dyn[v0, v1, v2])\n                            lv6_shared_dyn[v0, v1, v2] = lv6[v0, v1, v2]\n            for ax0 in range(T.int64(1)):\n                for ax1_fused_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                    for ax1_fused_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                        with T.block(\"A_red_temp\"):\n                            v0 = T.axis.spatial(n, ax0_fused + ax0)\n                            v1 = T.axis.reduce(T.int64(2560), ax1_fused_0 * T.int64(128) + ax1_fused_1)\n                            T.reads(lv6_shared_dyn[T.int64(0), v0, v1])\n                            T.writes(A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0])\n                            with T.init():\n                                A_red_temp_v0_shared[T.int64(0), v0] = T.float32(0)\n                                A_red_temp_v1_shared[T.int64(0), v0] = T.float32(0)\n                            v_A_red_temp_v0: T.float32 = A_red_temp_v0_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1]\n                            v_A_red_temp_v1: T.float32 = A_red_temp_v1_shared[T.int64(0), v0] + lv6_shared_dyn[T.int64(0), v0, v1] * lv6_shared_dyn[T.int64(0), v0, v1]\n                            A_red_temp_v0_shared[T.int64(0), v0] = v_A_red_temp_v0\n                            A_red_temp_v1_shared[T.int64(0), v0] = v_A_red_temp_v1\n            for ax1_1 in T.thread_binding(T.int64(128), thread=\"threadIdx.x\"):\n                for ax1_0 in T.serial(T.int64(20), annotations={\"pragma_auto_unroll_max_step\": 256, \"pragma_unroll_explicit\": 1}):\n                    with T.block(\"compute\"):\n                        v0 = T.axis.spatial(n, ax0_fused)\n                        v1 = T.axis.spatial(T.int64(2560), ax1_0 * T.int64(128) + ax1_1)\n                        T.reads(lv6_shared_dyn[T.int64(0), v0, v1], A_red_temp_v0_shared[T.int64(0), v0], A_red_temp_v1_shared[T.int64(0), v0], param_1[v1], param_2[v1])\n                        T.writes(compute_intermediate[T.int64(0), v0, v1])\n                        compute_intermediate[T.int64(0), v0, v1] = T.Cast(\"float16\", (lv6_shared_dyn[T.int64(0), v0, v1] - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) * T.rsqrt(A_red_temp_v1_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) - A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002) * (A_red_temp_v0_shared[T.int64(0), v0] * T.float32(0.00039062500000000002)) + T.float32(1.0000000000000001e-05)) * param_1[v1] + param_2[v1])"
        }
    }
]